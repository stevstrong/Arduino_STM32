/******************************************************************************
 * The MIT License
 *
 * Copyright (c) 2010 Perry Hung.
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 *****************************************************************************/

/**
 * @brief USB virtual serial terminal
 */

#include "usb_serial_c.h"

//#include <stdint.h>

//#include <libmaple/nvic.h>
//#include "wirish.h"

//-----------------------------------------------------------------------------
uint32 usb_write_bytes(const uint8 *buf, uint32 len)
{
	if (!buf || !(usb_is_connected(USBLIB) && usb_is_configured(USBLIB))) {
        return 0;
    }

    uint32 txed = 0;
		txed = usb_cdcacm_tx((const uint8*)buf + txed, len - txed);

	return txed;
}

uint32 usb_write_str(const char *str) {
    return usb_write_bytes((const uint8*)str, strlen(str));
}

uint32 usb_write_byte(uint8 ch)
{
    return usb_write_bytes(&ch, 1);
}


int usb_availableForWrite(void) { return usb_cdcacm_tx_available(); }


uint32 usb_read_bytes(uint8 * buf, uint32 len) {
    uint32 rxed = 0;
    while (rxed < len) {
        rxed += usb_cdcacm_rx(buf + rxed, len - rxed);
    }

    return rxed;
}

/* Blocks forever until 1 byte is received */
int usb_read(void) {
    uint8 b;
	
	if (usb_cdcacm_rx(&b, 1)==0)
	{
		return -1;
	}
	else
	{
		return b;
	}
}
